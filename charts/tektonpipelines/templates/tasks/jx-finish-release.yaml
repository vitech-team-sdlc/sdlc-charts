apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: jx-finish-release
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "jx"
    tekton.dev/displayName: "jx-finish"
spec:
  description: >-
    Finish release
  workspaces:
    - name: source
      description: sources dir
  params:
    - description: git url to clone
      name: REPO_URL
      type: string
    - default: master
      description: git revision to checkout (branch, tag, sha, refâ€¦)
      name: PULL_PULL_SHA
      type: string
    - description: the unique build number
      name: BUILD_ID
      type: string
    - description: the name of the job which is the trigger context name
      name: JOB_NAME
      type: string
    - description: the specification of the job
      name: JOB_SPEC
      type: string
    - description: 'the kind of job: postsubmit or presubmit'
      name: JOB_TYPE
      type: string
    - default: master
      description: the base git reference of the pull request
      name: PULL_BASE_REF
      type: string
    - description: the git sha of the base of the pull request
      name: PULL_BASE_SHA
      type: string
    - default: ""
      description: git pull request number
      name: PULL_NUMBER
      type: string
    - default: ""
      description: git pull request ref in the form 'refs/pull/$PULL_NUMBER/head'
      name: PULL_PULL_REF
      type: string
    - description: git pull reference strings of base and latest in the form 'master:$PULL_BASE_SHA,$PULL_NUMBER:$PULL_PULL_SHA:refs/pull/$PULL_NUMBER/head'
      name: PULL_REFS
      type: string
    - description: git repository name
      name: REPO_NAME
      type: string
    - description: git repository owner (user or organisation)
      name: REPO_OWNER
      type: string
    - name: SLACK_SECRET
      default: slack
      description: slack secret name
    - name: SLACK_CHANEL
      default: "{{ .Values.task.release.slackChannel }}"
      description: slack chanel to notify about release
    - name: JX_BOOT
      default: "{{ .Values.jx.images.boot }}"
    - name: JX_CLI
      default: "{{ .Values.jx.images.cli }}"
    - name: JX_CHANGELOG
      default: "{{ .Values.jx.images.changelog }}"
    - name: JX_PROMOTE
      default: "{{ .Values.jx.images.promote }}"
  stepTemplate:
    envFrom:
      - secretRef:
          name: jx-boot-job-env-vars
          optional: true
    env:
      - name: BUILD_ID
        value: $(params.BUILD_ID)
      - name: JOB_NAME
        value: $(params.JOB_NAME)
      - name: JOB_SPEC
        value: $(params.JOB_SPEC)
      - name: JOB_TYPE
        value: $(params.JOB_TYPE)
      - name: PULL_BASE_REF
        value: $(params.PULL_BASE_REF)
      - name: PULL_BASE_SHA
        value: $(params.PULL_BASE_SHA)
      - name: PULL_NUMBER
        value: $(params.PULL_NUMBER)
      - name: PULL_PULL_REF
        value: $(params.PULL_PULL_REF)
      - name: PULL_PULL_SHA
        value: $(params.PULL_PULL_SHA)
      - name: PULL_REFS
        value: $(params.PULL_REFS)
      - name: REPO_NAME
        value: $(params.REPO_NAME)
      - name: REPO_OWNER
        value: $(params.REPO_OWNER)
      - name: REPO_URL
        value: $(params.REPO_URL)
      - name: GIT_TOKEN
        valueFrom:
          secretKeyRef:
            key: password
            name: tekton-git
      - name: GIT_USER
        valueFrom:
          secretKeyRef:
            key: username
            name: tekton-git
  steps:
    - name: promote-changelog
      image: $(params.JX_CHANGELOG)
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env sh
        source .jx/variables.sh

        git config --global --add user.name ${GIT_AUTHOR_NAME:-jenkins-x-bot}
        git config --global --add user.email ${GIT_AUTHOR_EMAIL:-jenkins-x@googlegroups.com}
        git config --global credential.helper store

        if [ -d "charts/$REPO_NAME" ]; then
        jx gitops yset -p version -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
        jx gitops yset -p appVersion -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
        jx gitops yset -p 'image.repository' -v $DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME -f ./charts/$REPO_NAME/values.yaml
        jx gitops yset -p 'image.tag' -v "$VERSION" -f ./charts/$REPO_NAME/values.yaml;
        else echo no charts; fi

        git add * || true
        git commit -a -m "chore: release $VERSION" --allow-empty
        git tag -fa v$VERSION -m "Release version $VERSION"
        git push --force origin v$VERSION

        jx changelog create --version v${VERSION}
    - name: promote-helm-release
      image: $(params.JX_BOOT)
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env sh
        jx gitops helm release
    - name: promote-jx-promote
      image: $(params.JX_PROMOTE)
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env sh
        source .jx/variables.sh
        jx promote -b --all --timeout 1h --no-poll > promote.log 2>&1
        cat promote.log
    {{- if .Values.task.release.slackChannel }}
    - name: slack-notify
      image: $(params.JX_CLI)
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env bash
        source .jx/variables.sh

        export PR_URL=$(cat promote.log | grep "Created Pull Request" | grep -Eo '(http|https).+')
        export REPO_TAG_URL="https://github.com/$(params.REPO_OWNER)/$(params.REPO_NAME)/tree/v${VERSION}"
        export DOCKER_IMAGE_URL="https://$DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION"
        export CHANGE_LOG_URL="https://github.com/$(params.REPO_OWNER)/$(params.REPO_NAME)/releases/tag/v${VERSION}"

        eval "cat <<EOF
        $SLACK_MESSAGE_TMPL
        EOF
        " >rpl.json
        export MESSAGE=$(cat rpl.json)
        curl -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_TOKEN" --data "$MESSAGE" https://slack.com/api/chat.postMessage
      env:
        - name: SLACK_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.SLACK_SECRET)
              key: SLACK_TOKEN
        - name: SLACK_CHANEL
          value: "$(params.SLACK_CHANEL)"
        - name: SLACK_MESSAGE_TMPL
          value: {{ .Values.task.release.message | toJson }}
    {{- end }}
